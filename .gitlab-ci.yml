.functions: &functions |
  function check_and_build_images {
    set -x

    # Check that cern-release is modified
    if [ $(git show --name-only --oneline --pretty="format:" cern-release | grep cern-release) -ne 0 ] ; then
      echo "Please update the cern-release file appropriately."
      exit 1
    fi

    # keep kubernetes-node and kubernetes-master images by running a container,
    # so that the cleanup script doesn't remove them
    docker pull registry.fedoraproject.org/fedora:rawhide
    docker run -d registry.fedoraproject.org/fedora:rawhide sleep 3600
    docker build --rm -t kubernetes-node:rawhide kubernetes-node/
    docker run -d kubernetes-node:rawhide sleep 3600
    docker build --rm -t kubernetes-master:rawhide kubernetes-master/
    docker run -d kubernetes-master:rawhide sleep 3600

    for CONTAINER in $CONTAINERS ; do
      if [[ $CONTAINER =~ "kubernetes" ]] ; then
        PATTERN="kubernetes-master kubernetes-node kubernetes-apiserver kubernetes-scheduler kubernetes-controller-mananager kubernetes-proxy kubernetes-kubelet"
        TAG=$KUBE_TAG
      elif [ $CONTAINER == "docker-centos" ] ; then
        PATTERN=$CONTAINER
        TAG=$DOCKER_TAG
      else
        echo "Container: ""$CONTAINER"" not defined."
        exit 1
      fi
      # check in any of the CONTAINER is modified, the TAG is set and it doesn't already exist.
      if [ $(git show --name-only --oneline --pretty="" "$PATTERN" | wc -l) -gt 1 ] && [ -n "${TAG}" ] ; then
        echo "Files in pattern: ""$PATTERN"" are modified. Checking if the image already exists."
        docker pull gitlab-registry.cern.ch/"$CI_PROJECT_NAMESPACE"/"$CI_PROJECT_NAME"/"$CONTAINER":"${TAG}"
        if [ $? -ne 0 ] ; then echo "Please update the cern-release file adding a new tag for""${CONTAINER}""." ; exit 1 ; fi
      else
        echo "Files in pattern: ""$PATTERN"" are NOT modified."
      fi
      docker build --rm -t "${IMAGE_PREFIX}""${CONTAINER}":"$CI_BUILD_REF" "${CONTAINER}"
      docker push "${IMAGE_PREFIX}""${CONTAINER}":"$CI_BUILD_REF"
    done
  }

  function tag_images {
    for CONTAINER in $CONTAINERS ; do
        if [[ $CONTAINER =~ "kubernetes" ]] ; then
            _CI_BUILD_TAG=$KUBE_TAG ;
        elif [ $CONTAINER == "docker-centos" ] ; then
            _CI_BUILD_TAG=$DOCKER_TAG ;
        else
            echo "Container: ""$CONTAINER"" not defined."
            exit 1
        fi
        docker pull ${IMAGE_PREFIX}${CONTAINER}:$CI_BUILD_REF
        docker tag ${IMAGE_PREFIX}${CONTAINER}:$CI_BUILD_REF ${IMAGE_PREFIX}${CONTAINER}:$_CI_BUILD_TAG
        docker push ${IMAGE_PREFIX}${CONTAINER}:$_CI_BUILD_TAG
    done
  }

stages:
  - deploy
before_script:
  - export CONTAINERS="kubernetes-apiserver kubernetes-scheduler kubernetes-controller-manager kubernetes-kubelet kubernetes-proxy docker-centos"
  - export IMAGE_PREFIX=gitlab-registry.cern.ch/"$CI_PROJECT_NAMESPACE"/"$CI_PROJECT_NAME"/
  - source cern-release
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.cern.ch
  - *functions

deploy branch:
  stage: deploy
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - check_and_build_images
  except:
    - tags
    - cern-master
    - cern-qa
  tags:
    - cci-swarm-builder

# For now, we only tag kubernetes and docker. The tag must have the
# following format: <kubernetes-tag>---<docker-tag> e.g. v1.8.1---17.09
deploy tag:
  stage: deploy
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - tag_images
  only:
    - cern-qa
    - cern-master
  tags:
    - cci-swarm-builder
